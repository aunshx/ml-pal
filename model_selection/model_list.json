{
    "YOLOv8": {
        "Model Overview": "\u4e2d\u6587|\ud55c\uad6d\uc5b4|\u65e5\u672c\u8a9e|\u0420\u0443\u0441\u0441\u043a\u0438\u0439|Deutsch|Fran\u00e7ais|Espa\u00f1ol|Portugu\u00eas|\u0939\u093f\u0928\u094d\u0926\u0940|\u0627\u0644\u0639\u0631\u0628\u064a\u0629UltralyticsYOLOv8is a cutting-edge, state-of-the-art (SOTA) model that builds upon the success of previous YOLO versions and introduces new features and improvements to further boost performance and flexibility. YOLOv8 is designed to be fast, accurate, and easy to use, making it an excellent choice for a wide range of object detection and tracking, instance segmentation, image classification and pose estimation tasks.We hope that the resources here will help you get the most out of YOLOv8. Please browse the YOLOv8Docsfor details, raise an issue onGitHubfor support, and join ourDiscordcommunity for questions and discussions!To request an Enterprise License please complete the form atUltralytics Licensing.DocumentationSee below for a quickstart installation and usage example, and see theYOLOv8 Docsfor full documentation on training, validation, prediction and deployment.InstallPip install the ultralytics package including allrequirementsin aPython>=3.8environment withPyTorch>=1.8.pip install ultralyticsFor alternative installation methods includingConda,Docker, and Git, please refer to theQuickstart Guide.UsageCLIYOLOv8 may be used directly in the Command Line Interface (CLI) with ayolocommand:yolo predict model=yolov8n.ptsource='https://ultralytics.com/images/bus.jpg'yolocan be used for a variety of tasks and modes and accepts additional arguments, i.e.imgsz=640. See the YOLOv8CLI Docsfor examples.PythonYOLOv8 may also be used directly in a Python environment, and accepts the sameargumentsas in the CLI example above:fromultralyticsimportYOLO# Load a modelmodel = YOLO(\"yolov8n.yaml\")# build a new model from scratchmodel = YOLO(\"yolov8n.pt\")# load a pretrained model (recommended for training)# Use the modelmodel.train(data=\"coco128.yaml\", epochs=3)# train the modelmetrics = model.val()# evaluate model performance on the validation setresults = model(\"https://ultralytics.com/images/bus.jpg\")# predict on an imagepath = model.export(format=\"onnx\")# export the model to ONNX formatSee YOLOv8Python Docsfor more examples.NotebooksUltralytics provides interactive notebooks for YOLOv8, covering training, validation, tracking, and more. Each notebook is paired with aYouTubetutorial, making it easy to learn and implement advanced YOLOv8 features.DocsNotebookYouTubeYOLOv8 Train, Val, Predict and Export ModesUltralytics HUB QuickStartYOLOv8 Multi-Object Tracking in VideosYOLOv8 Object Counting in VideosYOLOv8 Heatmaps in VideosUltralytics Datasets Explorer with SQL and OpenAI Integration \ud83d\ude80 NewModelsYOLOv8Detect,SegmentandPosemodels pretrained on theCOCOdataset are available here, as well as YOLOv8Classifymodels pretrained on theImageNetdataset.Trackmode is available for all Detect, Segment and Pose models.AllModelsdownload automatically from the latest Ultralyticsreleaseon first use.Detection (COCO)SeeDetection Docsfor usage examples with these models trained onCOCO, which include 80 pre-trained classes.Modelsize(pixels)mAPval50-95SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B)YOLOv8n64037.380.40.993.28.7YOLOv8s64044.9128.41.2011.228.6YOLOv8m64050.2234.71.8325.978.9YOLOv8l64052.9375.22.3943.7165.2YOLOv8x64053.9479.13.5368.2257.8mAPvalvalues are for single-model single-scale onCOCO val2017dataset.Reproduce byyolo val detect data=coco.yaml device=0Speedaveraged over COCO val images using anAmazon EC2 P4dinstance.Reproduce byyolo val detect data=coco.yaml batch=1 device=0|cpuDetection (Open Image V7)SeeDetection Docsfor usage examples with these models trained onOpen Image V7, which include 600 pre-trained classes.Modelsize(pixels)mAPval50-95SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B)YOLOv8n64018.4142.41.213.510.5YOLOv8s64027.7183.11.4011.429.7YOLOv8m64033.6408.52.2626.280.6YOLOv8l64034.9596.92.4344.1167.4YOLOv8x64036.3860.63.5668.7260.6mAPvalvalues are for single-model single-scale onOpen Image V7dataset.Reproduce byyolo val detect data=open-images-v7.yaml device=0Speedaveraged over Open Image V7 val images using anAmazon EC2 P4dinstance.Reproduce byyolo val detect data=open-images-v7.yaml batch=1 device=0|cpuSegmentation (COCO)SeeSegmentation Docsfor usage examples with these models trained onCOCO-Seg, which include 80 pre-trained classes.Modelsize(pixels)mAPbox50-95mAPmask50-95SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B)YOLOv8n-seg64036.730.596.11.213.412.6YOLOv8s-seg64044.636.8155.71.4711.842.6YOLOv8m-seg64049.940.8317.02.1827.3110.2YOLOv8l-seg64052.342.6572.42.7946.0220.5YOLOv8x-seg64053.443.4712.14.0271.8344.1mAPvalvalues are for single-model single-scale onCOCO val2017dataset.Reproduce byyolo val segment data=coco-seg.yaml device=0Speedaveraged over COCO val images using anAmazon EC2 P4dinstance.Reproduce byyolo val segment data=coco-seg.yaml batch=1 device=0|cpuPose (COCO)SeePose Docsfor usage examples with these models trained onCOCO-Pose, which include 1 pre-trained class, person.Modelsize(pixels)mAPpose50-95mAPpose50SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B)YOLOv8n-pose64050.480.1131.81.183.39.2YOLOv8s-pose64060.086.2233.21.4211.630.2YOLOv8m-pose64065.088.8456.32.0026.481.0YOLOv8l-pose64067.690.0784.52.5944.4168.6YOLOv8x-pose64069.290.21607.13.7369.4263.2YOLOv8x-pose-p6128071.691.24088.710.0499.11066.4mAPvalvalues are for single-model single-scale onCOCO Keypoints val2017dataset.Reproduce byyolo val pose data=coco-pose.yaml device=0Speedaveraged over COCO val images using anAmazon EC2 P4dinstance.Reproduce byyolo val pose data=coco-pose.yaml batch=1 device=0|cpuOBB (DOTAv1)SeeOBB Docsfor usage examples with these models trained onDOTAv1, which include 15 pre-trained classes.Modelsize(pixels)mAPtest50SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B)YOLOv8n-obb102478.0204.773.573.123.3YOLOv8s-obb102479.5424.884.0711.476.3YOLOv8m-obb102480.5763.487.6126.4208.6YOLOv8l-obb102480.71278.4211.8344.5433.8YOLOv8x-obb102481.361759.1013.2369.5676.7mAPtestvalues are for single-model multi-scale onDOTAv1dataset.Reproduce byyolo val obb data=DOTAv1.yaml device=0 split=testand submit merged results toDOTA evaluation.Speedaveraged over DOTAv1 val images using anAmazon EC2 P4dinstance.Reproduce byyolo val obb data=DOTAv1.yaml batch=1 device=0|cpuClassification (ImageNet)SeeClassification Docsfor usage examples with these models trained onImageNet, which include 1000 pretrained classes.Modelsize(pixels)acctop1acctop5SpeedCPU ONNX(ms)SpeedA100 TensorRT(ms)params(M)FLOPs(B) at 640YOLOv8n-cls22469.088.312.90.312.74.3YOLOv8s-cls22473.891.723.40.356.413.5YOLOv8m-cls22476.893.585.40.6217.042.7YOLOv8l-cls22476.893.5163.00.8737.599.7YOLOv8x-cls22479.094.6232.01.0157.4154.8accvalues are model accuracies on theImageNetdataset validation set.Reproduce byyolo val classify data=path/to/ImageNet device=0Speedaveraged over ImageNet val images using anAmazon EC2 P4dinstance.Reproduce byyolo val classify data=path/to/ImageNet batch=1 device=0|cpuIntegrationsOur key integrations with leading AI platforms extend the functionality of Ultralytics' offerings, enhancing tasks like dataset labeling, training, visualization, and model management. Discover how Ultralytics, in collaboration withRoboflow, ClearML,Comet, Neural Magic andOpenVINO, can optimize your AI workflow.RoboflowClearML \u2b50 NEWComet \u2b50 NEWNeural Magic \u2b50 NEWLabel and export your custom datasets directly to YOLOv8 for training withRoboflowAutomatically track, visualize and even remotely train YOLOv8 usingClearML(open-source!)Free forever,Cometlets you save YOLOv8 models, resume training, and interactively visualize and debug predictionsRun YOLOv8 inference up to 6x faster withNeural Magic DeepSparseUltralytics HUBExperience seamless AI withUltralytics HUB\u2b50, the all-in-one solution for data visualization, YOLOv5 and YOLOv8 \ud83d\ude80 model training and deployment, without any coding. Transform images into actionable insights and bring your AI visions to life with ease using our cutting-edge platform and user-friendlyUltralytics App. Start your journey forFreenow!ContributeWe love your input! YOLOv5 and YOLOv8 would not be possible without help from our community. Please see ourContributing Guideto get started, and fill out ourSurveyto send us feedback on your experience. Thank you \ud83d\ude4f to all our contributors!LicenseUltralytics offers two licensing options to accommodate diverse use cases:AGPL-3.0 License: ThisOSI-approvedopen-source license is ideal for students and enthusiasts, promoting open collaboration and knowledge sharing. See theLICENSEfile for more details.Enterprise License: Designed for commercial use, this license permits seamless integration of Ultralytics software and AI models into commercial goods and services, bypassing the open-source requirements of AGPL-3.0. If your scenario involves embedding our solutions into a commercial offering, reach out throughUltralytics Licensing.ContactFor Ultralytics bug reports and feature requests please visitGitHub Issues, and join ourDiscordcommunity for questions and discussions!"
    },
    "swin-tiny-patch4-window7-224": {
        "Model Overview": "Swin Transformer (tiny-sized model)Swin Transformer model trained on ImageNet-1k at resolution 224x224. It was introduced in the paperSwin Transformer: Hierarchical Vision Transformer using Shifted Windowsby Liu et al. and first released inthis repository.Disclaimer: The team releasing Swin Transformer did not write a model card for this model so this model card has been written by the Hugging Face team.Model descriptionThe Swin Transformer is a type of Vision Transformer. It builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks. In contrast, previous vision Transformers produce feature maps of a single low resolution and have quadratic computation complexity to input image size due to computation of self-attention globally.SourceIntended uses & limitationsYou can use the raw model for image classification. See themodel hubto look for\nfine-tuned versions on a task that interests you.How to useHere is how to use this model to classify an image of the COCO 2017 dataset into one of the 1,000 ImageNet classes:fromtransformersimportAutoImageProcessor, AutoModelForImageClassificationfromPILimportImageimportrequests\n\nurl =\"http://images.cocodataset.org/val2017/000000039769.jpg\"image = Image.open(requests.get(url, stream=True).raw)\n\nprocessor = AutoImageProcessor.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\")\nmodel = AutoModelForImageClassification.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\")\n\ninputs = processor(images=image, return_tensors=\"pt\")\noutputs = model(**inputs)\nlogits = outputs.logits# model predicts one of the 1000 ImageNet classespredicted_class_idx = logits.argmax(-1).item()print(\"Predicted class:\", model.config.id2label[predicted_class_idx])For more code examples, we refer to thedocumentation.BibTeX entry and citation info@article{DBLP:journals/corr/abs-2103-14030,\n  author    = {Ze Liu and\n               Yutong Lin and\n               Yue Cao and\n               Han Hu and\n               Yixuan Wei and\n               Zheng Zhang and\n               Stephen Lin and\n               Baining Guo},\n  title     = {Swin Transformer: Hierarchical Vision Transformer using Shifted Windows},\n  journal   = {CoRR},\n  volume    = {abs/2103.14030},\n  year      = {2021},\n  url       = {https://arxiv.org/abs/2103.14030},\n  eprinttype = {arXiv},\n  eprint    = {2103.14030},\n  timestamp = {Thu, 08 Apr 2021 07:53:26 +0200},\n  biburl    = {https://dblp.org/rec/journals/corr/abs-2103-14030.bib},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "detr-resnet-50": {
        "Model Overview": "DETR (End-to-End Object Detection) model with ResNet-50 backboneDEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paperEnd-to-End Object Detection with Transformersby Carion et al. and first released inthis repository.Disclaimer: The team releasing DETR did not write a model card for this model so this model card has been written by the Hugging Face team.Model descriptionThe DETR model is an encoder-decoder transformer with a convolutional backbone. Two heads are added on top of the decoder outputs in order to perform object detection: a linear layer for the class labels and a MLP (multi-layer perceptron) for the bounding boxes. The model uses so-called object queries to detect objects in an image. Each object query looks for a particular object in the image. For COCO, the number of object queries is set to 100.The model is trained using a \"bipartite matching loss\": one compares the predicted classes + bounding boxes of each of the N = 100 object queries to the ground truth annotations, padded up to the same length N (so if an image only contains 4 objects, 96 annotations will just have a \"no object\" as class and \"no bounding box\" as bounding box). The Hungarian matching algorithm is used to create an optimal one-to-one mapping between each of the N queries and each of the N annotations. Next, standard cross-entropy (for the classes) and a linear combination of the L1 and generalized IoU loss (for the bounding boxes) are used to optimize the parameters of the model.Intended uses & limitationsYou can use the raw model for object detection. See themodel hubto look for all available DETR models.How to useHere is how to use this model:fromtransformersimportDetrImageProcessor, DetrForObjectDetectionimporttorchfromPILimportImageimportrequests\n\nurl =\"http://images.cocodataset.org/val2017/000000039769.jpg\"image = Image.open(requests.get(url, stream=True).raw)# you can specify the revision tag if you don't want the timm dependencyprocessor = DetrImageProcessor.from_pretrained(\"facebook/detr-resnet-50\", revision=\"no_timm\")\nmodel = DetrForObjectDetection.from_pretrained(\"facebook/detr-resnet-50\", revision=\"no_timm\")\n\ninputs = processor(images=image, return_tensors=\"pt\")\noutputs = model(**inputs)# convert outputs (bounding boxes and class logits) to COCO API# let's only keep detections with score > 0.9target_sizes = torch.tensor([image.size[::-1]])\nresults = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]forscore, label, boxinzip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n    box = [round(i,2)foriinbox.tolist()]print(f\"Detected{model.config.id2label[label.item()]}with confidence \"f\"{round(score.item(),3)}at location{box}\")This should output:Detected remote with confidence 0.998 at location [40.16, 70.81, 175.55, 117.98]\nDetected remote with confidence 0.996 at location [333.24, 72.55, 368.33, 187.66]\nDetected couch with confidence 0.995 at location [-0.02, 1.15, 639.73, 473.76]\nDetected cat with confidence 0.999 at location [13.24, 52.05, 314.02, 470.93]\nDetected cat with confidence 0.999 at location [345.4, 23.85, 640.37, 368.72]Currently, both the feature extractor and model support PyTorch.Training dataThe DETR model was trained onCOCO 2017 object detection, a dataset consisting of 118k/5k annotated images for training/validation respectively.Training procedurePreprocessingThe exact details of preprocessing of images during training/validation can be foundhere.Images are resized/rescaled such that the shortest side is at least 800 pixels and the largest side at most 1333 pixels, and normalized across the RGB channels with the ImageNet mean (0.485, 0.456, 0.406) and standard deviation (0.229, 0.224, 0.225).TrainingThe model was trained for 300 epochs on 16 V100 GPUs. This takes 3 days, with 4 images per GPU (hence a total batch size of 64).Evaluation resultsThis model achieves an AP (average precision) of42.0on COCO 2017 validation. For more details regarding evaluation results, we refer to table 1 of the original paper.BibTeX entry and citation info@article{DBLP:journals/corr/abs-2005-12872,\n  author    = {Nicolas Carion and\n               Francisco Massa and\n               Gabriel Synnaeve and\n               Nicolas Usunier and\n               Alexander Kirillov and\n               Sergey Zagoruyko},\n  title     = {End-to-End Object Detection with Transformers},\n  journal   = {CoRR},\n  volume    = {abs/2005.12872},\n  year      = {2020},\n  url       = {https://arxiv.org/abs/2005.12872},\n  archivePrefix = {arXiv},\n  eprint    = {2005.12872},\n  timestamp = {Thu, 28 May 2020 17:38:09 +0200},\n  biburl    = {https://dblp.org/rec/journals/corr/abs-2005-12872.bib},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "gpt2": {
        "Model Overview": "GPT-2Test the whole generation capabilities here:https://transformer.huggingface.co/doc/gpt2-largePretrained model on English language using a causal language modeling (CLM) objective. It was introduced inthis paperand first released atthis page.Disclaimer: The team releasing GPT-2 also wrote amodel cardfor their model. Content from this model card\nhas been written by the Hugging Face team to complete the information they provided and give specific examples of bias.Model descriptionGPT-2 is a transformers model pretrained on a very large corpus of English data in a self-supervised fashion. This\nmeans it was pretrained on the raw texts only, with no humans labelling them in any way (which is why it can use lots\nof publicly available data) with an automatic process to generate inputs and labels from those texts. More precisely,\nit was trained to guess the next word in sentences.More precisely, inputs are sequences of continuous text of a certain length and the targets are the same sequence,\nshifted one token (word or piece of word) to the right. The model uses internally a mask-mechanism to make sure the\npredictions for the tokenionly uses the inputs from1toibut not the future tokens.This way, the model learns an inner representation of the English language that can then be used to extract features\nuseful for downstream tasks. The model is best at what it was pretrained for however, which is generating texts from a\nprompt.This is thesmallestversion of GPT-2, with 124M parameters.Related Models:GPT-Large,GPT-MediumandGPT-XLIntended uses & limitationsYou can use the raw model for text generation or fine-tune it to a downstream task. See themodel hubto look for fine-tuned versions on a task that interests you.How to useYou can use this model directly with a pipeline for text generation. Since the generation relies on some randomness, we\nset a seed for reproducibility:>>>fromtransformersimportpipeline, set_seed>>>generator = pipeline('text-generation', model='gpt2')>>>set_seed(42)>>>generator(\"Hello, I'm a language model,\", max_length=30, num_return_sequences=5)\n\n[{'generated_text':\"Hello, I'm a language model, a language for thinking, a language for expressing thoughts.\"},\n {'generated_text':\"Hello, I'm a language model, a compiler, a compiler library, I just want to know how I build this kind of stuff. I don\"},\n {'generated_text':\"Hello, I'm a language model, and also have more than a few of your own, but I understand that they're going to need some help\"},\n {'generated_text':\"Hello, I'm a language model, a system model. I want to know my language so that it might be more interesting, more user-friendly\"},\n {'generated_text':'Hello, I\\'m a language model, not a language model\"\\n\\nThe concept of \"no-tricks\" comes in handy later with new'}]Here is how to use this model to get the features of a given text in PyTorch:fromtransformersimportGPT2Tokenizer, GPT2Model\ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2Model.from_pretrained('gpt2')\ntext =\"Replace me by any text you'd like.\"encoded_input = tokenizer(text, return_tensors='pt')\noutput = model(**encoded_input)and in TensorFlow:fromtransformersimportGPT2Tokenizer, TFGPT2Model\ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = TFGPT2Model.from_pretrained('gpt2')\ntext =\"Replace me by any text you'd like.\"encoded_input = tokenizer(text, return_tensors='tf')\noutput = model(encoded_input)Limitations and biasThe training data used for this model has not been released as a dataset one can browse. We know it contains a lot of\nunfiltered content from the internet, which is far from neutral. As the openAI team themselves point out in theirmodel card:Because large-scale language models like GPT-2 do not distinguish fact from fiction, we don\u2019t support use-cases\nthat require the generated text to be true.Additionally, language models like GPT-2 reflect the biases inherent to the systems they were trained on, so we do\nnot recommend that they be deployed into systems that interact with humans > unless the deployers first carry out a\nstudy of biases relevant to the intended use-case. We found no statistically significant difference in gender, race,\nand religious bias probes between 774M and 1.5B, implying all versions of GPT-2 should be approached with similar\nlevels of caution around use cases that are sensitive to biases around human attributes.Here's an example of how the model can have biased predictions:>>>fromtransformersimportpipeline, set_seed>>>generator = pipeline('text-generation', model='gpt2')>>>set_seed(42)>>>generator(\"The White man worked as a\", max_length=10, num_return_sequences=5)\n\n[{'generated_text':'The White man worked as a mannequin for'},\n {'generated_text':'The White man worked as a maniser of the'},\n {'generated_text':'The White man worked as a bus conductor by day'},\n {'generated_text':'The White man worked as a plumber at the'},\n {'generated_text':'The White man worked as a journalist. He had'}]>>>set_seed(42)>>>generator(\"The Black man worked as a\", max_length=10, num_return_sequences=5)\n\n[{'generated_text':'The Black man worked as a man at a restaurant'},\n {'generated_text':'The Black man worked as a car salesman in a'},\n {'generated_text':'The Black man worked as a police sergeant at the'},\n {'generated_text':'The Black man worked as a man-eating monster'},\n {'generated_text':'The Black man worked as a slave, and was'}]This bias will also affect all fine-tuned versions of this model.Training dataThe OpenAI team wanted to train this model on a corpus as large as possible. To build it, they scraped all the web\npages from outbound links on Reddit which received at least 3 karma. Note that all Wikipedia pages were removed from\nthis dataset, so the model was not trained on any part of Wikipedia. The resulting dataset (called WebText) weights\n40GB of texts but has not been publicly released. You can find a list of the top 1,000 domains present in WebTexthere.Training procedurePreprocessingThe texts are tokenized using a byte-level version of Byte Pair Encoding (BPE) (for unicode characters) and a\nvocabulary size of 50,257. The inputs are sequences of 1024 consecutive tokens.The larger model was trained on 256 cloud TPU v3 cores. The training duration was not disclosed, nor were the exact\ndetails of training.Evaluation resultsThe model achieves the following results without any fine-tuning (zero-shot):DatasetLAMBADALAMBADACBT-CNCBT-NEWikiText2PTBenwiki8text8WikiText1031BW(metric)(PPL)(ACC)(ACC)(ACC)(PPL)(PPL)(BPB)(BPC)(PPL)(PPL)35.1345.9987.6583.429.4165.851.161,1737.5075.20BibTeX entry and citation info@article{radford2019language,\n  title={Language Models are Unsupervised Multitask Learners},\n  author={Radford, Alec and Wu, Jeff and Child, Rewon and Luan, David and Amodei, Dario and Sutskever, Ilya},\n  year={2019}\n}"
    },
    "bert-base-uncased": {
        "Model Overview": "BERT base model (uncased)Pretrained model on English language using a masked language modeling (MLM) objective. It was introduced inthis paperand first released inthis repository. This model is uncased: it does not make a difference\nbetween english and English.Disclaimer: The team releasing BERT did not write a model card for this model so this model card has been written by\nthe Hugging Face team.Model descriptionBERT is a transformers model pretrained on a large corpus of English data in a self-supervised fashion. This means it\nwas pretrained on the raw texts only, with no humans labeling them in any way (which is why it can use lots of\npublicly available data) with an automatic process to generate inputs and labels from those texts. More precisely, it\nwas pretrained with two objectives:Masked language modeling (MLM): taking a sentence, the model randomly masks 15% of the words in the input then run\nthe entire masked sentence through the model and has to predict the masked words. This is different from traditional\nrecurrent neural networks (RNNs) that usually see the words one after the other, or from autoregressive models like\nGPT which internally masks the future tokens. It allows the model to learn a bidirectional representation of the\nsentence.Next sentence prediction (NSP): the models concatenates two masked sentences as inputs during pretraining. Sometimes\nthey correspond to sentences that were next to each other in the original text, sometimes not. The model then has to\npredict if the two sentences were following each other or not.This way, the model learns an inner representation of the English language that can then be used to extract features\nuseful for downstream tasks: if you have a dataset of labeled sentences, for instance, you can train a standard\nclassifier using the features produced by the BERT model as inputs.Model variationsBERT has originally been released in base and large variations, for cased and uncased input text. The uncased models also strips out an accent markers.Chinese and multilingual uncased and cased versions followed shortly after.Modified preprocessing with whole word masking has replaced subpiece masking in a following work, with the release of two models.Other 24 smaller models are released afterward.The detailed release history can be found on thegoogle-research/bert readmeon github.Model#paramsLanguagebert-base-uncased110MEnglishbert-large-uncased340MEnglishbert-base-cased110MEnglishbert-large-cased340MEnglishbert-base-chinese110MChinesebert-base-multilingual-cased110MMultiplebert-large-uncased-whole-word-masking340MEnglishbert-large-cased-whole-word-masking340MEnglishIntended uses & limitationsYou can use the raw model for either masked language modeling or next sentence prediction, but it's mostly intended to\nbe fine-tuned on a downstream task. See themodel hubto look for\nfine-tuned versions of a task that interests you.Note that this model is primarily aimed at being fine-tuned on tasks that use the whole sentence (potentially masked)\nto make decisions, such as sequence classification, token classification or question answering. For tasks such as text\ngeneration you should look at model like GPT2.How to useYou can use this model directly with a pipeline for masked language modeling:>>>fromtransformersimportpipeline>>>unmasker = pipeline('fill-mask', model='bert-base-uncased')>>>unmasker(\"Hello I'm a [MASK] model.\")\n\n[{'sequence':\"[CLS] hello i'm a fashion model. [SEP]\",'score':0.1073106899857521,'token':4827,'token_str':'fashion'},\n {'sequence':\"[CLS] hello i'm a role model. [SEP]\",'score':0.08774490654468536,'token':2535,'token_str':'role'},\n {'sequence':\"[CLS] hello i'm a new model. [SEP]\",'score':0.05338378623127937,'token':2047,'token_str':'new'},\n {'sequence':\"[CLS] hello i'm a super model. [SEP]\",'score':0.04667217284440994,'token':3565,'token_str':'super'},\n {'sequence':\"[CLS] hello i'm a fine model. [SEP]\",'score':0.027095865458250046,'token':2986,'token_str':'fine'}]Here is how to use this model to get the features of a given text in PyTorch:fromtransformersimportBertTokenizer, BertModel\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained(\"bert-base-uncased\")\ntext =\"Replace me by any text you'd like.\"encoded_input = tokenizer(text, return_tensors='pt')\noutput = model(**encoded_input)and in TensorFlow:fromtransformersimportBertTokenizer, TFBertModel\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = TFBertModel.from_pretrained(\"bert-base-uncased\")\ntext =\"Replace me by any text you'd like.\"encoded_input = tokenizer(text, return_tensors='tf')\noutput = model(encoded_input)Limitations and biasEven if the training data used for this model could be characterized as fairly neutral, this model can have biased\npredictions:>>>fromtransformersimportpipeline>>>unmasker = pipeline('fill-mask', model='bert-base-uncased')>>>unmasker(\"The man worked as a [MASK].\")\n\n[{'sequence':'[CLS] the man worked as a carpenter. [SEP]','score':0.09747550636529922,'token':10533,'token_str':'carpenter'},\n {'sequence':'[CLS] the man worked as a waiter. [SEP]','score':0.0523831807076931,'token':15610,'token_str':'waiter'},\n {'sequence':'[CLS] the man worked as a barber. [SEP]','score':0.04962705448269844,'token':13362,'token_str':'barber'},\n {'sequence':'[CLS] the man worked as a mechanic. [SEP]','score':0.03788609802722931,'token':15893,'token_str':'mechanic'},\n {'sequence':'[CLS] the man worked as a salesman. [SEP]','score':0.037680890411138535,'token':18968,'token_str':'salesman'}]>>>unmasker(\"The woman worked as a [MASK].\")\n\n[{'sequence':'[CLS] the woman worked as a nurse. [SEP]','score':0.21981462836265564,'token':6821,'token_str':'nurse'},\n {'sequence':'[CLS] the woman worked as a waitress. [SEP]','score':0.1597415804862976,'token':13877,'token_str':'waitress'},\n {'sequence':'[CLS] the woman worked as a maid. [SEP]','score':0.1154729500412941,'token':10850,'token_str':'maid'},\n {'sequence':'[CLS] the woman worked as a prostitute. [SEP]','score':0.037968918681144714,'token':19215,'token_str':'prostitute'},\n {'sequence':'[CLS] the woman worked as a cook. [SEP]','score':0.03042375110089779,'token':5660,'token_str':'cook'}]This bias will also affect all fine-tuned versions of this model.Training dataThe BERT model was pretrained onBookCorpus, a dataset consisting of 11,038\nunpublished books andEnglish Wikipedia(excluding lists, tables and\nheaders).Training procedurePreprocessingThe texts are lowercased and tokenized using WordPiece and a vocabulary size of 30,000. The inputs of the model are\nthen of the form:[CLS] Sentence A [SEP] Sentence B [SEP]With probability 0.5, sentence A and sentence B correspond to two consecutive sentences in the original corpus, and in\nthe other cases, it's another random sentence in the corpus. Note that what is considered a sentence here is a\nconsecutive span of text usually longer than a single sentence. The only constrain is that the result with the two\n\"sentences\" has a combined length of less than 512 tokens.The details of the masking procedure for each sentence are the following:15% of the tokens are masked.In 80% of the cases, the masked tokens are replaced by[MASK].In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.In the 10% remaining cases, the masked tokens are left as is.PretrainingThe model was trained on 4 cloud TPUs in Pod configuration (16 TPU chips total) for one million steps with a batch size\nof 256. The sequence length was limited to 128 tokens for 90% of the steps and 512 for the remaining 10%. The optimizer\nused is Adam with a learning rate of 1e-4,\u03b21=0.9\\beta_{1} = 0.9\u03b21\u200b=0.9and\u03b22=0.999\\beta_{2} = 0.999\u03b22\u200b=0.999, a weight decay of 0.01,\nlearning rate warmup for 10,000 steps and linear decay of the learning rate after.Evaluation resultsWhen fine-tuned on downstream tasks, this model achieves the following results:Glue test results:TaskMNLI-(m/mm)QQPQNLISST-2CoLASTS-BMRPCRTEAverage84.6/83.471.290.593.552.185.888.966.479.6BibTeX entry and citation info@article{DBLP:journals/corr/abs-1810-04805,\n  author    = {Jacob Devlin and\n               Ming{-}Wei Chang and\n               Kenton Lee and\n               Kristina Toutanova},\n  title     = {{BERT:} Pre-training of Deep Bidirectional Transformers for Language\n               Understanding},\n  journal   = {CoRR},\n  volume    = {abs/1810.04805},\n  year      = {2018},\n  url       = {http://arxiv.org/abs/1810.04805},\n  archivePrefix = {arXiv},\n  eprint    = {1810.04805},\n  timestamp = {Tue, 30 Oct 2018 20:39:56 +0100},\n  biburl    = {https://dblp.org/rec/journals/corr/abs-1810-04805.bib},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "Meta-Llama-3-8B": {
        "Model Overview": "Model DetailsMeta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks. Further, in developing these models, we took great care to optimize helpfulness and safety.Model developersMetaVariationsLlama 3 comes in two sizes \u2014 8B and 70B parameters \u2014 in pre-trained and instruction tuned variants.InputModels input text only.OutputModels generate text and code only.Model ArchitectureLlama 3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.Training DataParamsContext lengthGQAToken countKnowledge cutoffLlama 3A new mix of publicly available online data.8B8kYes15T+March, 202370B8kYesDecember, 2023Llama 3 family of models. Token counts refer to pretraining data only. Both the 8 and 70B versions use Grouped-Query Attention (GQA) for improved inference scalability.Model Release DateApril 18, 2024.StatusThis is a static model trained on an offline dataset. Future versions of the tuned models will be released as we improve model safety with community feedback.LicenseA custom commercial license is available at:https://llama.meta.com/llama3/licenseWhere to send questions or comments about the model Instructions on how to provide feedback or comments on the model can be found in the modelREADME. For more technical information about generation parameters and recipes for how to use Llama 3 in applications, please gohere.Intended UseIntended Use CasesLlama 3 is intended for commercial and research use in English. Instruction tuned models are intended for assistant-like chat, whereas pretrained models can be adapted for a variety of natural language generation tasks.Out-of-scopeUse in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the Acceptable Use Policy and Llama 3 Community License. Use in languages other than English**.**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the Llama 3 Community License and the Acceptable Use Policy.How to useThis repository contains two versions of Meta-Llama-3-8B, for use with transformers and with the originalllama3codebase.Use with transformersSee the snippet below for usage with Transformers:>>>importtransformers>>>importtorch>>>model_id =\"meta-llama/Meta-Llama-3-8B\">>>pipeline = transformers.pipeline(\"text-generation\", model=model_id, model_kwargs={\"torch_dtype\": torch.bfloat16}, device_map=\"auto\")>>>pipeline(\"Hey how are you doing today?\")Use withllama3Please, follow the instructions in therepository.To download Original checkpoints, see the example command below leveraginghuggingface-cli:huggingface-cli download meta-llama/Meta-Llama-3-8B --include \"original/*\" --local-dir Meta-Llama-3-8BFor Hugging Face support, we recommend using transformers or TGI, but a similar command works.Hardware and SoftwareTraining FactorsWe used custom training libraries, Meta's Research SuperCluster, and production clusters for pretraining. Fine-tuning, annotation, and evaluation were also performed on third-party cloud compute.Carbon Footprint Pretraining utilized a cumulative7.7M GPU hours of computation on hardware of type H100-80GB (TDP of 700W). Estimated total emissions were 2290 tCO2eq, 100% of which were offset by Meta\u2019s sustainability program.Time (GPU hours)Power Consumption (W)Carbon Emitted(tCO2eq)Llama 3 8B1.3M700390Llama 3 70B6.4M7001900Total7.7M2290CO2 emissions during pre-training. Time: total GPU time required for training each model. Power Consumption: peak power capacity per GPU device for the GPUs used adjusted for power usage efficiency. 100% of the emissions are directly offset by Meta's sustainability program, and because we are openly releasing these models, the pretraining costs do not need to be incurred by others.Training DataOverviewLlama 3 was pretrained on over 15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 10M human-annotated examples. Neither the pretraining nor the fine-tuning datasets include Meta user data.Data FreshnessThe pretraining data has a cutoff of March 2023 for the 8B and December 2023 for the 70B models respectively.BenchmarksIn this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology seehere.Base pretrained modelsCategoryBenchmarkLlama 3 8BLlama2 7BLlama2 13BLlama 3 70BLlama2 70BGeneralMMLU (5-shot)66.645.753.879.569.7AGIEval English (3-5 shot)45.928.838.763.054.8CommonSenseQA (7-shot)72.657.667.683.878.7Winogrande (5-shot)76.173.375.483.181.8BIG-Bench Hard (3-shot, CoT)61.138.147.081.365.7ARC-Challenge (25-shot)78.653.767.693.085.3Knowledge reasoningTriviaQA-Wiki (5-shot)78.572.179.689.787.5Reading comprehensionSQuAD (1-shot)76.472.272.185.682.6QuAC (1-shot, F1)44.439.644.951.149.4BoolQ (0-shot)75.765.566.979.073.1DROP (3-shot, F1)58.437.949.879.770.2Instruction tuned modelsBenchmarkLlama 3 8BLlama 2 7BLlama 2 13BLlama 3 70BLlama 2 70BMMLU (5-shot)68.434.147.882.052.9GPQA (0-shot)34.221.722.339.521.0HumanEval (0-shot)62.27.914.081.725.6GSM-8K (8-shot, CoT)79.625.777.493.057.5MATH (4-shot, CoT)30.03.86.750.411.6Responsibility & SafetyWe believe that an open approach to AI leads to better, safer products, faster innovation, and a bigger overall market. We are committed to Responsible AI development and took a series of steps to limit misuse and harm and support the open source community.Foundation models are widely capable technologies that are built to be used for a diverse range of applications. They are not designed to meet every developer preference on safety levels for all use cases, out-of-the-box, as those by their nature will differ across different applications.Rather, responsible LLM-application deployment is achieved by implementing a series of safety best practices throughout the development of such applications, from the model pre-training, fine-tuning and the deployment of systems composed of safeguards to tailor the safety needs specifically to the use case and audience.As part of the Llama 3 release, we updated ourResponsible Use Guideto outline the steps and best practices for developers to implement model and system level safety for their application. We also provide a set of resources includingMeta Llama Guard 2andCode Shieldsafeguards. These tools have proven to drastically reduce residual risks of LLM Systems, while maintaining a high level of helpfulness. We encourage developers to tune and deploy these safeguards according to their needs and we provide areference implementationto get you started.Llama 3-InstructAs outlined in the Responsible Use Guide, some trade-off between model helpfulness and model alignment is likely unavoidable. Developers should exercise discretion about how to weigh the benefits of alignment and helpfulness for their specific use case and audience. Developers should be mindful of residual risks when using Llama models and leverage additional safety tools as needed to reach the right safety bar for their use case.SafetyFor our instruction tuned model, we conducted extensive red teaming exercises, performed adversarial evaluations and implemented safety mitigations techniques to lower residual risks. As with any Large Language Model, residual risks will likely remain and we recommend that developers assess these risks in the context of their use case. In parallel, we are working with the community to make AI safety benchmark standards transparent, rigorous and interpretable.RefusalsIn addition to residual risks, we put a great emphasis on model refusals to benign prompts. Over-refusing not only can impact the user experience but could even be harmful in certain contexts as well. We\u2019ve heard the feedback from the developer community and improved our fine tuning to ensure that Llama 3 is significantly less likely to falsely refuse to answer prompts than Llama 2.We built internal benchmarks and developed mitigations to limit false refusals making Llama 3 our most helpful model to date.Responsible releaseIn addition to responsible use considerations outlined above, we followed a rigorous process that requires us to take extra measures against misuse and critical risks before we make our release decision.MisuseIf you access or use Llama 3, you agree to the Acceptable Use Policy. The most recent copy of this policy can be found athttps://llama.meta.com/llama3/use-policy/.Critical risksCBRNE(Chemical, Biological, Radiological, Nuclear, and high yield Explosives)We have conducted a two fold assessment of the safety of the model in this area:Iterative testing during model training to assess the safety of responses related to CBRNE threats and other adversarial risks.Involving external CBRNE experts to conduct an uplift test assessing the ability of the model to accurately provide expert knowledge and reduce barriers to potential CBRNE misuse, by reference to what can be achieved using web search (without the model).Cyber SecurityWe have evaluated Llama 3 with CyberSecEval, Meta\u2019s cybersecurity safety eval suite, measuring Llama 3\u2019s propensity to suggest insecure code when used as a coding assistant, and Llama 3\u2019s propensity to comply with requests to help carry out cyber attacks, where attacks are defined by the industry standard MITRE ATT&CK cyber attack ontology. On our insecure coding and cyber attacker helpfulness tests, Llama 3 behaved in the same range or safer than models ofequivalent coding capability.Child SafetyChild Safety risk assessments were conducted using a team of experts, to assess the model\u2019s capability to produce outputs that could result in Child Safety risks and inform on any necessary and appropriate risk mitigations via fine tuning. We leveraged those expert red teaming sessions to expand the coverage of our evaluation benchmarks through Llama 3 model development.  For Llama 3, we conducted new in-depth sessions using objective based methodologies to assess the model risks along multiple attack vectors. We also partnered with content specialists to perform red teaming exercises assessing potentially violating content while taking account of market specific nuances or experiences.CommunityGenerative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to ourGithub repository.Finally, we put in place a set of resources including anoutput reporting mechanismandbug bounty programto continuously improve the Llama technology with the help of the community.Ethical Considerations and LimitationsThe core values of Llama 3 are openness, inclusivity and helpfulness. It is meant to serve everyone, and to work for a wide range of use cases. It is thus designed to be accessible to people across many different backgrounds, experiences and perspectives. Llama 3 addresses users and their needs as they are, without insertion unnecessary judgment or normativity, while reflecting the understanding that even content that may appear problematic in some cases can serve valuable purposes in others. It respects the dignity and autonomy of all users, especially in terms of the values of free thought and expression that power innovation and progress.But Llama 3 is a new technology, and like any new technology, there are risks associated with its use. Testing conducted to date has been in English, and has not covered, nor could it cover, all scenarios. For these reasons, as with all LLMs, Llama 3\u2019s potential outputs cannot be predicted in advance, and the model may in some instances produce inaccurate, biased or other objectionable responses to user prompts. Therefore, before deploying any applications of Llama 3 models, developers should perform safety testing and tuning tailored to their specific applications of the model. As outlined in the Responsible Use Guide, we recommend incorporatingPurple Llamasolutions into your workflows and specificallyLlama Guardwhich provides a base model to filter input and output prompts to layer system-level safety on top of model-level safety.Please see the Responsible Use Guide available athttp://llama.meta.com/responsible-use-guideCitation instructions@article{llama3modelcard,title={Llama 3 Model Card},author={AI@Meta},year={2024},url = {https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md}}ContributorsAaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos"
    },
    "stable-audio-open-1.0": {
        "Model Overview": "Stable Audio Open 1.0Please note: For commercial use, please refer tohttps://stability.ai/licenseModel DescriptionStable Audio Open 1.0generates variable-length (up to 47s) stereo audio at 44.1kHz from text prompts. It comprises three components: an autoencoder that compresses waveforms into a manageable sequence length, a T5-based text embedding for text conditioning, and a transformer-based diffusion (DiT) model that operates in the latent space of the autoencoder.UsageThis model can be used with:thestable-audio-toolslibrarythediffuserslibraryUsing withstable-audio-toolsThis model is made to be used with thestable-audio-toolslibrary for inference, for example:importtorchimporttorchaudiofromeinopsimportrearrangefromstable_audio_toolsimportget_pretrained_modelfromstable_audio_tools.inference.generationimportgenerate_diffusion_cond\n\ndevice =\"cuda\"iftorch.cuda.is_available()else\"cpu\"# Download modelmodel, model_config = get_pretrained_model(\"stabilityai/stable-audio-open-1.0\")\nsample_rate = model_config[\"sample_rate\"]\nsample_size = model_config[\"sample_size\"]\n\nmodel = model.to(device)# Set up text and timing conditioningconditioning = [{\"prompt\":\"128 BPM tech house drum loop\",\"seconds_start\":0,\"seconds_total\":30}]# Generate stereo audiooutput = generate_diffusion_cond(\n    model,\n    steps=100,\n    cfg_scale=7,\n    conditioning=conditioning,\n    sample_size=sample_size,\n    sigma_min=0.3,\n    sigma_max=500,\n    sampler_type=\"dpmpp-3m-sde\",\n    device=device\n)# Rearrange audio batch to a single sequenceoutput = rearrange(output,\"b d n -> d (b n)\")# Peak normalize, clip, convert to int16, and save to fileoutput = output.to(torch.float32).div(torch.max(torch.abs(output))).clamp(-1,1).mul(32767).to(torch.int16).cpu()\ntorchaudio.save(\"output.wav\", output, sample_rate)Using withdiffusersMake sure you upgrade to the latest version of diffusers:pip install -U diffusers. And then you can run:importtorchimportsoundfileassffromdiffusersimportStableAudioPipeline\n\npipe = StableAudioPipeline.from_pretrained(\"stabilityai/stable-audio-open-1.0\", torch_dtype=torch.float16)\npipe = pipe.to(\"cuda\")# define the promptsprompt =\"The sound of a hammer hitting a wooden surface.\"negative_prompt =\"Low quality.\"# set the seed for generatorgenerator = torch.Generator(\"cuda\").manual_seed(0)# run the generationaudio = pipe(\n    prompt,\n    negative_prompt=negative_prompt,\n    num_inference_steps=200,\n    audio_end_in_s=10.0,\n    num_waveforms_per_prompt=3,\n    generator=generator,\n).audios\n\noutput = audio[0].T.float().cpu().numpy()\nsf.write(\"hammer.wav\", output, pipe.vae.sampling_rate)Refer to thedocumentationfor more details on optimization and usage.Model DetailsModel type:Stable Audio Open 1.0is a latent diffusion model based on a transformer architecture.Language(s): EnglishLicense:Stability AI Community License.Commercial License: to use this model commercially, please refer tohttps://stability.ai/licenseResearch Paper:https://arxiv.org/abs/2407.14358Training datasetDatasets UsedOur dataset consists of 486492 audio recordings, where 472618 are from Freesound and 13874 are from the Free Music Archive (FMA). All audio files are licensed under CC0, CC BY, or CC Sampling+. This data is used to train our autoencoder and DiT. We use a publicly available pre-trained T5 model (t5-base) for text conditioning.AttributionAttribution for all audio recordings used to train Stable Audio Open 1.0 can be found in this repository.Freesound attribution [csv]FMA attribution [csv]MitigationsWe conducted an in-depth analysis to ensure no unauthorized copyrighted music was present in our training data before we began training.To that end, we first identified music samples in Freesound using thePANNsmusic classifier based on AudioSet classes. The identified music samples had at least 30 seconds of music that was predicted to belong to a music-related class with a threshold of 0.15 (PANNs output probabilities range from 0 to 1). This threshold was determined by classifying known music examples from FMA and ensuring no false negatives were present.The identified music samples were sent to Audible Magic\u2019s identification services, a trusted content detection company, to ensure the absence of copyrighted music. Audible Magic flagged suspected copyrighted music, which we subsequently removed before training on the dataset. The majority of the removed content was field recordings in which copyrighted music was playing in the background. Following this procedure, we were left with 266324 CC0, 194840 CC-BY, and 11454 CC Sampling+ audio recordings.We also conducted an in-depth analysis to ensure no copyrighted content was present in FMA's subset. In this case, the procedure was slightly different because the FMA subset consists of music signals. We did a metadata search against a large database of copyrighted music (https://www.kaggle.com/datasets/maharshipandya/-spotify-tracks-dataset) and flagged any potential match. The flagged content was reviewed individually by humans. After this process, we ended up with 8967 CC-BY and 4907 CC0 tracks.Use and LimitationsIntended UseThe primary use of Stable Audio Open is research and experimentation on AI-based music and audio generation, including:Research efforts to better understand the limitations of generative models and further improve the state of science.Generation of music and audio guided by text to explore current abilities of generative AI models by machine learning practitioners and artists.Out-of-Scope Use CasesThe model should not be used on downstream applications without further risk evaluation and mitigation. The model should not be used to intentionally create or disseminate audio or music pieces that create hostile or alienating environments for people.LimitationsThe model is not able to generate realistic vocals.The model has been trained with English descriptions and will not perform as well in other languages.The model does not perform equally well for all music styles and cultures.The model is better at generating sound effects and field recordings than music.It is sometimes difficult to assess what types of text descriptions provide the best generations. Prompt engineering may be required to obtain satisfying results.BiasesThe source of data is potentially lacking diversity and all cultures are not equally represented in the dataset. The model may not perform equally well on the wide variety of music genres and sound effects that exist. The generated samples from the model will reflect the biases from the training data."
    },
    "ChatTTS": {
        "Model Overview": "We are also training larger-scale models and need computational power and data support. If you can provide assistance, please contactOPEN-SOURCE@2NOISE.COM. Thank you very much.Clone the RepositoryFirst, clone the Git repository:gitclonehttps://github.com/2noise/ChatTTS.gitModel Inference# Import necessary libraries and configure settingsimporttorchimporttorchaudio\ntorch._dynamo.config.cache_size_limit =64torch._dynamo.config.suppress_errors =Truetorch.set_float32_matmul_precision('high')importChatTTSfromIPython.displayimportAudio# Initialize and load the model:chat = ChatTTS.Chat()\nchat.load_models(compile=False)# Set to True for better performance# Define the text input for inference (Support Batching)texts = [\"So we found being competitive and collaborative was a huge way of staying motivated towards our goals, so one person to call when you fall off, one person who gets you back on then one person to actually do the activity with.\",\n    ]# Perform inference and play the generated audiowavs = chat.infer(texts)\nAudio(wavs[0], rate=24_000, autoplay=True)# Save the generated audiotorchaudio.save(\"output.wav\", torch.from_numpy(wavs[0]),24000)For more usage examples, please refer to theexample notebook, which includes parameters for finer control over the generated speech, such as specifying the speaker, adjusting speech speed, and adding laughter.Disclaimer: For Academic Purposes OnlyThe information provided in this document is for academic purposes only. It is intended for educational and research use, and should not be used for any commercial or legal purposes. The authors do not guarantee the accuracy, completeness, or reliability of the information."
    },
    "bark": {
        "Model Overview": "BarkBark is a transformer-based text-to-audio model created bySuno. \nBark can generate highly realistic, multilingual speech as well as other audio - including music, \nbackground noise and simple sound effects. The model can also produce nonverbal \ncommunications like laughing, sighing and crying. To support the research community, \nwe are providing access to pretrained model checkpoints ready for inference.The original github repo and model card can be foundhere.This model is meant for research purposes only. \nThe model output is not censored and the authors do not endorse the opinions in the generated content. \nUse at your own risk.Two checkpoints are released:smalllarge(this checkpoint)ExampleTry out Bark yourself!Bark Colab:Hugging Face Colab:Hugging Face Demo:\ud83e\udd17 Transformers UsageYou can run Bark locally with the \ud83e\udd17 Transformers library from version 4.31.0 onwards.First install the \ud83e\udd17Transformers libraryand scipy:pip install --upgrade pip\npip install --upgrade transformers scipyRun inference via theText-to-Speech(TTS) pipeline. You can infer the bark model via the TTS pipeline in just a few lines of code!fromtransformersimportpipelineimportscipy\n\nsynthesiser = pipeline(\"text-to-speech\",\"suno/bark\")\n\nspeech = synthesiser(\"Hello, my dog is cooler than you!\", forward_params={\"do_sample\":True})\n\nscipy.io.wavfile.write(\"bark_out.wav\", rate=speech[\"sampling_rate\"], data=speech[\"audio\"])Run inference via the Transformers modelling code. You can use the processor + generate code to convert text into a mono 24 kHz speech waveform for more fine-grained control.fromtransformersimportAutoProcessor, AutoModel\n\nprocessor = AutoProcessor.from_pretrained(\"suno/bark\")\nmodel = AutoModel.from_pretrained(\"suno/bark\")\n\ninputs = processor(\n    text=[\"Hello, my name is Suno. And, uh \u2014 and I like pizza. [laughs] But I also have other interests such as playing tic tac toe.\"],\n    return_tensors=\"pt\",\n)\n\nspeech_values = model.generate(**inputs, do_sample=True)Listen to the speech samples either in an ipynb notebook:fromIPython.displayimportAudio\n\nsampling_rate = model.generation_config.sample_rate\nAudio(speech_values.cpu().numpy().squeeze(), rate=sampling_rate)Or save them as a.wavfile using a third-party library, e.g.scipy:importscipy\n\nsampling_rate = model.config.sample_rate\nscipy.io.wavfile.write(\"bark_out.wav\", rate=sampling_rate, data=speech_values.cpu().numpy().squeeze())For more details on using the Bark model for inference using the \ud83e\udd17 Transformers library, refer to theBark docs.Suno UsageYou can also run Bark locally through the originalBark library:First install thebarklibraryRun the following Python code:frombarkimportSAMPLE_RATE, generate_audio, preload_modelsfromIPython.displayimportAudio# download and load all modelspreload_models()# generate audio from texttext_prompt =\"\"\"Hello, my name is Suno. And, uh \u2014 and I like pizza. [laughs]But I also have other interests such as playing tic tac toe.\"\"\"speech_array = generate_audio(text_prompt)# play text in notebookAudio(speech_array, rate=SAMPLE_RATE)pizza.webmTo saveaudio_arrayas a WAV file:fromscipy.io.wavfileimportwriteaswrite_wav\n\nwrite_wav(\"/path/to/audio.wav\", SAMPLE_RATE, audio_array)Model DetailsThe following is additional information about the models released here.Bark is a series of three transformer models that turn text into audio.Text to semantic tokensInput: text, tokenized withBERT tokenizer from Hugging FaceOutput: semantic tokens that encode the audio to be generatedSemantic to coarse tokensInput: semantic tokensOutput: tokens from the first two codebooks of theEnCodec Codecfrom facebookCoarse to fine tokensInput: the first two codebooks from EnCodecOutput: 8 codebooks from EnCodecArchitectureModelParametersAttentionOutput Vocab sizeText to semantic tokens80/300 MCausal10,000Semantic to coarse tokens80/300 MCausal2x 1,024Coarse to fine tokens80/300 MNon-causal6x 1,024Release dateApril 2023Broader ImplicationsWe anticipate that this model's text to audio capabilities can be used to improve accessbility tools in a variety of languages.While we hope that this release will enable users to express their creativity and build applications that are a force\nfor good, we acknowledge that any text to audio model has the potential for dual use. While it is not straightforward\nto voice clone known people with Bark, it can still be used for nefarious purposes. To further reduce the chances of unintended use of Bark, \nwe also release a simple classifier to detect Bark-generated audio with high accuracy (see notebooks section of the main repository)."
    }
}